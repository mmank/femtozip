# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.9 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# C compiler 
CC = gcc

# C++ compiler 
CXX = g++

# Standard flags for CC 
CFLAGS ?= 

# Standard flags for C++ 
CXXFLAGS ?= 

# Standard preprocessor flags (common for CC and CXX) 
CPPFLAGS ?= 

# Standard linker flags 
LDFLAGS ?= 

#  [debug,release]
BUILD ?= release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

CPPDEPS = -MT$@ -MF$@.d -MD -MP
FZ_CFLAGS =  $(__OPTIMIZE_FLAG) $(__DEBUG_FLAG)  $(CPPFLAGS) $(CFLAGS)
FZ_CXXFLAGS =  $(__OPTIMIZE_FLAG) $(__DEBUG_FLAG)  $(CPPFLAGS) $(CXXFLAGS)
FZ_OBJECTS =  \
	fz_CStringDocumentList.o \
	fz_Codeword.o \
	fz_CompressionModel.o \
	fz_DataIO.o \
	fz_DecodeTable.o \
	fz_DictionaryOptimizer.o \
	fz_DocumentList.o \
	fz_FemtoZipCompressionModel.o \
	fz_FileDocumentList.o \
	fz_FileUtil.o \
	fz_FrequencyHuffmanModel.o \
	fz_HuffmanDecoder.o \
	fz_HuffmanEncoder.o \
	fz_PrefixHash.o \
	fz_PureHuffmanCompressionModel.o \
	fz_SamplingDocumentList.o \
	fz_Substring.o \
	fz_SubstringPacker.o \
	fz_SubstringUnpacker.o \
	fz_VerboseStringConsumer.o \
	fz_femtozip.o \
	fz_lcp.o \
	fz_sarray.o
FZTESTS_CFLAGS = $(__OPTIMIZE_FLAG) $(__DEBUG_FLAG) -I.\libfz\src $(CPPFLAGS) \
	$(CFLAGS)
FZTESTS_CXXFLAGS = $(__OPTIMIZE_FLAG) $(__DEBUG_FLAG) -I.\libfz\src $(CPPFLAGS) \
	$(CXXFLAGS)
FZTESTS_OBJECTS =  \
	fztests_fztests.o \
	fztests_example.o

### Conditionally set variables: ###

ifeq ($(BUILD),debug)
LIBNAME = fzd
endif
ifeq ($(BUILD),release)
LIBNAME = fz
endif
ifeq ($(BUILD),debug)
__OPTIMIZE_FLAG = -O0
endif
ifeq ($(BUILD),release)
__OPTIMIZE_FLAG = -O2
endif
ifeq ($(BUILD),debug)
__DEBUG_FLAG = -g
endif
ifeq ($(BUILD),release)
__DEBUG_FLAG = 
endif


### Targets: ###

all: lib$(LIBNAME).a fztests.exe

clean: 
	-if exist .\*.o del .\*.o
	-if exist .\*.d del .\*.d
	-if exist lib$(LIBNAME).a del lib$(LIBNAME).a
	-if exist fztests.exe del fztests.exe

lib$(LIBNAME).a: $(FZ_OBJECTS)
	if exist $@ del $@
	ar rcu $@ $(FZ_OBJECTS)
	ranlib $@

fztests.exe: $(FZTESTS_OBJECTS) lib$(LIBNAME).a
	$(CXX) -o $@ $(FZTESTS_OBJECTS)  $(__DEBUG_FLAG) $(LDFLAGS)  lib$(LIBNAME).a

fz_CStringDocumentList.o: ./libfz/src/CStringDocumentList.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_Codeword.o: ./libfz/src/Codeword.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_CompressionModel.o: ./libfz/src/CompressionModel.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_DataIO.o: ./libfz/src/DataIO.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_DecodeTable.o: ./libfz/src/DecodeTable.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_DictionaryOptimizer.o: ./libfz/src/DictionaryOptimizer.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_DocumentList.o: ./libfz/src/DocumentList.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_FemtoZipCompressionModel.o: ./libfz/src/FemtoZipCompressionModel.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_FileDocumentList.o: ./libfz/src/FileDocumentList.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_FileUtil.o: ./libfz/src/FileUtil.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_FrequencyHuffmanModel.o: ./libfz/src/FrequencyHuffmanModel.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_HuffmanDecoder.o: ./libfz/src/HuffmanDecoder.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_HuffmanEncoder.o: ./libfz/src/HuffmanEncoder.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_PrefixHash.o: ./libfz/src/PrefixHash.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_PureHuffmanCompressionModel.o: ./libfz/src/PureHuffmanCompressionModel.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_SamplingDocumentList.o: ./libfz/src/SamplingDocumentList.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_Substring.o: ./libfz/src/Substring.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_SubstringPacker.o: ./libfz/src/SubstringPacker.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_SubstringUnpacker.o: ./libfz/src/SubstringUnpacker.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_VerboseStringConsumer.o: ./libfz/src/VerboseStringConsumer.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_femtozip.o: ./libfz/src/femtozip.cpp
	$(CXX) -c -o $@ $(FZ_CXXFLAGS) $(CPPDEPS) $<

fz_lcp.o: ./libfz/src/lcp.c
	$(CC) -c -o $@ $(FZ_CFLAGS) $(CPPDEPS) $<

fz_sarray.o: ./libfz/src/sarray.c
	$(CC) -c -o $@ $(FZ_CFLAGS) $(CPPDEPS) $<

fztests_fztests.o: ./fztests/src/fztests.cpp
	$(CXX) -c -o $@ $(FZTESTS_CXXFLAGS) $(CPPDEPS) $<

fztests_example.o: ./fztests/src/example.c
	$(CC) -c -o $@ $(FZTESTS_CFLAGS) $(CPPDEPS) $<

.PHONY: all clean


SHELL := $(COMSPEC)

# Dependencies tracking:
-include ./*.d
